#spring.application.name=ecomm-app
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#spring.jpa.show-sql = true // This will allow us to see what sql query is used behind the sense to do the job
#spring.jpa.hibernate.ddl-auto = create // Whenever the app started this will convert all the entity into table
#management.endpoints.web.exposure.include=*

spring:
  datasource:
    url: ${DB_URI}
    username: ${DB_USER}
    password: ${DB_PASSWORD}


  cloud:
    stream:
      bindings:
        createOrder-out-0:
          destination: order.exchange
          content-type: application/json
      kafka:
        binder:
          brokers: localhost:9092
#      rabbit:
#        bindings:
#          createOrder-out-0:
#            producer:
#              routing-key-expression: '''order.tracking'''

#  rabbitmq:
#    host: ${RABBITMQ_HOST:localhost}
#    port: ${RABBITMQ_PORT:5672}
#    username: ${RABBITMQ_USER:guest}
#    password: ${RABBITMQ_PASSWORD:guest}
#    virtual-host: ${RABBITMQ_VHOST:guest}
#    connection-timeout: 30000
  jpa:
    database: POSTGRESQL
    show-sql: true
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
#  h2:
#    console:
#      enabled: true
#  datasource:
#    url: jdbc:h2:mem:test
#  jpa:
#    show-sql: true
#    hibernate:
#      ddl-auto: create


server:
  port: 8083

#rabbitmq:
#  exchange:
#    name: order.exchange
#  queue:
#    name: order.queue
#  routing:
#    key: order.tracking

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
  tracing:
    sampling:
      probability: 1.0


eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true


logging:
  file:
    name: logs/${spring.application.name}.log
  logback:
    rollingpolicy:
      max-file-size: 5MB
      max-history: 7


# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      productService:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        automatic-transition-from-open-to-half-open-enabled: true
        sliding-window-type: count_based
  retry:
    instances:
      exampleRetry:
        maxAttempts: 3
        waitDuration: 500ms
#        intervalFunction:
#            type: exponential
#            initialInterval: 500ms
#            multiplier: 1.5
#            maxInterval: 5s
#        retryExceptions:
#              - java.io.I0Exception
#              - java.sql.SQLException
#        ignoreExceptions:
#              - com.example.exception.NonRetriableException
#        failAfterMaxAttempts: false
